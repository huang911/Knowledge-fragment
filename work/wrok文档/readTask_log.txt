import { setCache as setReadCache, getCache as getReadCache } from '../../../api/common'
import Toast from '../../../utils/toast';
import { storeBindingsBehavior } from 'mobx-miniprogram-bindings'
import { store } from '../../../mobx/store';
import Cache from '../../../globalData/cache';
import { finishTask } from '../../../api/gold_welfare';
import EventHub from '../../../utils/eventHub';
import { getReadTask } from '../../../api/gold_welfare'
import { track } from '../../../sensor/courier'
import DataStorage from '../../../globalData/data_storage';

let listenTurnPage = false;
let turnPageTimer = null; // 翻页定时器
let timeOutTimer = null; // 在某个页面超过两分钟定时器
Component({
    behaviors: [storeBindingsBehavior],
    storeBindings: {
        store,
        fields: ['taskStatus'],
        actions: ['updateStatus'],
    },
    properties: {
        theme: {
            type: String,
            value: 'white'
        }
    },
    data: {
        minute: 0  // 已经阅读的时间
    },

    lifetimes: {
        attached() {
            Promise.all([getReadTask(), getReadCache()])
                .then(([list, res]) => {
                    this.setData({
                        minute: res && res.contents || 0,
                        readTask: list || []
                    })
                    this.setTimer();
                })
                .catch((err) => {
                    console.log('err', err)
                })    
        },
    
        detached() {
            this.hidePage();
        },
    },
     
    pageLifetimes: {
        hide() { // 直接杀进程时监听
           this.hidePage();
        }
    },

    methods: {
        setTimer() {
            // 阅读器顶部定时器按分钟变化
            console.log('set', turnPageTimer, this.data.readTask);
            if (!turnPageTimer) {
                console.log('setTimer');
                turnPageTimer = setInterval(() => {
                    this.setData({ minute: +this.data.minute + 1 });
                    const index = this.data.readTask.findIndex((item) => this.data.minute === item.time);
                    if (index > -1) {
                        this.updateTask();
                    }
                }, 60000);
                console.log('set1', turnPageTimer);
            }
            if (!listenTurnPage) {
                this.listenTurnPage();
                listenTurnPage = true;
            }
        },
        // 监听翻页
        listenTurnPage() {
            // 左右翻页时停在某个页面超过两分钟停止计时
            let _this = this;
            this.unscribe = EventHub.listen('turnPage', _this.throttle(function() {
                if (arguments[0] === 0) { // 切换VIP章节则停止计时 
                    timeOutTimer && clearInterval(timeOutTimer);
                    turnPageTimer && clearInterval(turnPageTimer);
                    turnPageTimer = null;
                    console.log('000', turnPageTimer);
                } else if (arguments[0] === 1){ // 第一次进入非VIP章节触发的翻页,并且不是VIP章节
                    console.log(1,turnPageTimer);
                    _this.setTimer();
                    timeOutTimer = setInterval(() => {
                        _this.showModal();
                        turnPageTimer && clearInterval(turnPageTimer);
                        turnPageTimer = null;
                        console.log(111, turnPageTimer);
                    }, 120000);
                } else if (arguments[0] === 2) {  // 用户切换非VIP章节(这里有多次，考虑频繁设置和清除定时器)
                    console.log(2, turnPageTimer);
                    _this.setTimer();
                    timeOutTimer && clearInterval(timeOutTimer);
                    // timeOutTimer = null;
                    timeOutTimer = setInterval(() => {
                        _this.showModal();
                        turnPageTimer && clearInterval(turnPageTimer);
                        turnPageTimer = null;
                        console.log(222, turnPageTimer);
                    }, 120000);
                } 
            }, 5000));
        },

        /**
         * 节流函数
         * 固定时间段间歇性执行
         */
        throttle (fn, wait) {
            wait = wait || 0;
            let timer;
            return function () {
                if (!timer) {
                    timer = setTimeout(function () {
                        timer = null;
                    }, wait);
                    fn.apply(this, arguments);
                }
            }
        },
        // 完成任务
        updateTask() {
            const { readTask } = this.data;
            const index = readTask.findIndex((item) => this.data.minute === item.time);
            const { id } = getApp().globalData.userInfo; // userId
            return finishTask(readTask[index].id)
                .then(res => {
                    console.log('res', res);
                    Toast.info(`已阅读${readTask[index].time}分钟，+${readTask[index].coin}金币`);
                    this.updateStatus(readTask[index].id, 1);
                    EventHub.trigger('doTask');
                    track('do_task', {
                        task_time: readTask[index].time,
                        task_id:  readTask[index].id,
                        location: 'read',
                        user_id: id
                    })
                })
                .catch(err => {
                    console.log('err', err)
                    this.updateTask();
                })
        },
        // 展示距离最近的任务
        showTask() {
            const { readTask } = this.data;
            const index = readTask.findIndex((item) => this.data.minute < item.time);
            index > -1 ?  Toast.info(`阅读满${readTask[index].time}分钟，即可获得${readTask[index].coin}金币`) : '';
        },
        // 停止计时后，提示用户,在计时器停止前一刻提示用户
        showModal() {
            if (turnPageTimer) {
                wx.showModal({
                    title: '已停止计时',
                    content: '你似乎停止了阅读，翻翻章继续看吧~',
                    confirmText: '好的',
                    showCancel: false,
                })
            } 
        },
        reset() {
            this.setData({
                minute: 0
            })
            setReadCache(0)
                .then(() => {
                    Toast.info('success')
                })
        },
        // 页面隐藏
        hidePage() {
            Cache.set('readTime', {contents: this.data.minute});
            setReadCache(this.data.minute) // 后台缓存阅读时长
            DataStorage.set('readTime', this.data.minute);
            this.unscribe && this.unscribe();
            timeOutTimer && clearInterval(timeOutTimer);
            turnPageTimer && clearInterval(turnPageTimer);
            turnPageTimer = null;
        }
    }
})